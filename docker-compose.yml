version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ticketing-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ticketing
      POSTGRES_PASSWORD: ticketing_password
      POSTGRES_DB: ticketing_marketplace
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticketing -d ticketing_marketplace"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ticketing-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: ticketing-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ticketing
      RABBITMQ_DEFAULT_PASS: ticketing_password
      RABBITMQ_DEFAULT_VHOST: ticketing
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ticketing-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://ticketing:ticketing_password@postgres:5432/ticketing_marketplace
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ticketing:ticketing_password@rabbitmq:5672/ticketing
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASS=${SMTP_PASS:-your-app-password}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - FLUTTERWAVE_PUBLIC_KEY=${FLUTTERWAVE_PUBLIC_KEY:-FLWPUBK_TEST-your-public-key}
      - FLUTTERWAVE_SECRET_KEY=${FLUTTERWAVE_SECRET_KEY:-FLWSECK_TEST-your-secret-key}
      - FLUTTERWAVE_WEBHOOK_HASH=${FLUTTERWAVE_WEBHOOK_HASH:-your-webhook-hash}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-ticketing-marketplace-uploads}
    ports:
      - "3001:3000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Workers
  workers:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: ticketing-workers
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ticketing:ticketing_password@postgres:5432/ticketing_marketplace
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ticketing:ticketing_password@rabbitmq:5672/ticketing
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-your-email@gmail.com}
      - SMTP_PASS=${SMTP_PASS:-your-app-password}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET:-ticketing-marketplace-uploads}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ticketing-network
    deploy:
      replicas: 2

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ticketing-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./uploads:/var/www/uploads:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - ticketing-network

networks:
  ticketing-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: